package models

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

// NotificationChannel ‚Äî –∫–∞–Ω–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type NotificationChannel string

const (
	ChannelEmail    NotificationChannel = "email"
	ChannelSMS      NotificationChannel = "sms"
	ChannelTelegram NotificationChannel = "telegram"
	ChannelPush     NotificationChannel = "push"
)

// NotificationType ‚Äî —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
type NotificationType string

const (
	// üè• Medical/Appointment
	AppointmentBooked      NotificationType = "appointment.booked"
	AppointmentCanceled    NotificationType = "appointment.canceled"
	AppointmentReminder    NotificationType = "appointment.reminder"
	AppointmentConfirmed   NotificationType = "appointment.confirmed"
	AppointmentNew         NotificationType = "appointment.new"
	AppointmentRescheduled NotificationType = "appointment.rescheduled"

	// üë§ User/Profile
	UserRegistered      NotificationType = "user.registered"
	UserProfileUpdated  NotificationType = "user.profile.updated"
	UserPasswordChanged NotificationType = "user.password.changed"

	// üíä Medical/Treatment
	PrescriptionIssued   NotificationType = "prescription.issued"
	PrescriptionExpiring NotificationType = "prescription.expiring"
	TreatmentStarted     NotificationType = "treatment.started"
	TreatmentCompleted   NotificationType = "treatment.completed"

	// üìã Medical/Results
	TestResultsReady    NotificationType = "test.results.ready"
	LabResultsAvailable NotificationType = "lab.results.available"

	// üîî General/System
	SystemMaintenance NotificationType = "system.maintenance"
	SecurityAlert     NotificationType = "security.alert"
	PaymentProcessed  NotificationType = "payment.processed"
	PaymentFailed     NotificationType = "payment.failed"

	// üß© System/Logger
	SystemErrorOccurred   NotificationType = "system.error.occurred"
	GatewayServiceFailure NotificationType = "gateway.service.failure"
)

// DeliveryStatus ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type DeliveryStatus string

const (
	StatusPending DeliveryStatus = "pending"
	StatusSent    DeliveryStatus = "sent"
	StatusFailed  DeliveryStatus = "failed"
)

// Notification ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type Notification struct {
	ID          uint                `gorm:"primaryKey" json:"id"`
	Type        NotificationType    `gorm:"type:varchar(100);not null" json:"type"`
	Channel     NotificationChannel `gorm:"type:varchar(50);not null" json:"channel"`
	RecipientID uuid.UUID           `gorm:"type:uuid;not null;index" json:"recipientId"`
	Recipient   string              `gorm:"type:varchar(255);not null" json:"recipient"`
	Message     string              `gorm:"type:text;not null" json:"message"`
	Status      DeliveryStatus      `gorm:"type:varchar(20);not null;default:'pending'" json:"status"`
	Attempts    int                 `gorm:"not null;default:0" json:"attempts"`
	LastError   *string             `gorm:"type:text" json:"lastError,omitempty"`
	Metadata    *string             `gorm:"type:jsonb" json:"metadata,omitempty"` // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
	CreatedAt   time.Time           `json:"createdAt"`
	SentAt      *time.Time          `json:"sentAt,omitempty"`
}

// TableName —É–∫–∞–∑—ã–≤–∞–µ—Ç GORM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è —Ç–∞–±–ª–∏—Ü—ã "notifications"
func (Notification) TableName() string {
	return "notifications"
}

// UserMetadata ‚Äî –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
type UserMetadata struct {
	UserID   uuid.UUID `json:"user_id"`
	Email    string    `json:"email"`
	Username string    `json:"username,omitempty"`
	Role     string    `json:"role,omitempty"`
	FullName string    `json:"full_name,omitempty"`
}

// AppointmentMetadata ‚Äî –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö
type AppointmentMetadata struct {
	AppointmentID uuid.UUID `json:"appointment_id"`
	PatientName   string    `json:"patient_name"`
	DoctorName    string    `json:"doctor_name"`
	DateTime      time.Time `json:"date_time"`
	Duration      int       `json:"duration_minutes"`
	Specialty     string    `json:"specialty,omitempty"`
}

// SystemMetadata ‚Äî –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type SystemMetadata struct {
	ServiceName string `json:"service_name,omitempty"`
	ErrorCode   string `json:"error_code,omitempty"`
	Details     string `json:"details,omitempty"`
}

// SetMetadata —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (n *Notification) SetMetadata(data interface{}) error {
	if data == nil {
		n.Metadata = nil
		return nil
	}

	jsonData, err := json.Marshal(data)
	if err != nil {
		return err
	}

	jsonStr := string(jsonData)
	n.Metadata = &jsonStr
	return nil
}

// GetUserMetadata –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (n *Notification) GetUserMetadata() (*UserMetadata, error) {
	if n.Metadata == nil {
		return nil, nil
	}

	var metadata UserMetadata
	err := json.Unmarshal([]byte(*n.Metadata), &metadata)
	if err != nil {
		return nil, err
	}

	return &metadata, nil
}

// GetAppointmentMetadata –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
func (n *Notification) GetAppointmentMetadata() (*AppointmentMetadata, error) {
	if n.Metadata == nil {
		return nil, nil
	}

	var metadata AppointmentMetadata
	err := json.Unmarshal([]byte(*n.Metadata), &metadata)
	if err != nil {
		return nil, err
	}

	return &metadata, nil
}
