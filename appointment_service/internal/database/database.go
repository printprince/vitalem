package database

import (
	"fmt"
	"log"

	"github.com/printprince/vitalem/appointment_service/internal/config"
	"github.com/printprince/vitalem/appointment_service/internal/models"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

// ConnectDB - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func ConnectDB(cfg *config.Config) (*gorm.DB, error) {
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		cfg.Database.Host,
		cfg.Database.Port,
		cfg.Database.User,
		cfg.Database.Password,
		cfg.Database.DBName,
		cfg.Database.SSLMode,
	)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}

	log.Println("‚úÖ Connected to database successfully")
	return db, nil
}

// RunMigrations - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
func RunMigrations(db *gorm.DB) error {
	log.Println("üîÑ Running database migrations...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É doctor_schedules –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if err := checkAndFixScheduleTable(db); err != nil {
		return fmt.Errorf("failed to check/fix schedule table: %w", err)
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
	err := db.AutoMigrate(
		&models.DoctorSchedule{},
		&models.ScheduleException{},
		&models.Appointment{},
	)
	if err != nil {
		return fmt.Errorf("failed to run migrations: %w", err)
	}

	log.Println("‚úÖ Database migrations completed successfully")
	return nil
}

// checkAndFixScheduleTable - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã doctor_schedules
func checkAndFixScheduleTable(db *gorm.DB) error {
	log.Println("üîç Checking doctor_schedules table structure...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
	var tableExists bool
	err := db.Raw("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = CURRENT_SCHEMA() AND table_name = 'doctor_schedules')").Scan(&tableExists).Error
	if err != nil {
		return fmt.Errorf("failed to check table existence: %w", err)
	}

	if !tableExists {
		log.Println("üìù Table doctor_schedules doesn't exist yet, will be created by AutoMigrate")
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü work_days (integer[])
	var workDaysColumnExists bool
	err = db.Raw("SELECT EXISTS (SELECT FROM information_schema.columns WHERE table_schema = CURRENT_SCHEMA() AND table_name = 'doctor_schedules' AND column_name = 'work_days')").Scan(&workDaysColumnExists).Error
	if err != nil {
		return fmt.Errorf("failed to check work_days column: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü work_days_json
	var workDaysJsonColumnExists bool
	err = db.Raw("SELECT EXISTS (SELECT FROM information_schema.columns WHERE table_schema = CURRENT_SCHEMA() AND table_name = 'doctor_schedules' AND column_name = 'work_days_json')").Scan(&workDaysJsonColumnExists).Error
	if err != nil {
		return fmt.Errorf("failed to check work_days_json column: %w", err)
	}

	if workDaysColumnExists {
		log.Println("‚ö†Ô∏è  CRITICAL: Found old work_days column (integer[]) in doctor_schedules table")
		log.Println("‚ö†Ô∏è  This column conflicts with the new structure and must be removed")
		log.Println("‚ö†Ô∏è  Please run the following SQL commands manually to fix this:")
		log.Println("‚ö†Ô∏è  ")
		log.Println("‚ö†Ô∏è  docker exec -it vitalem_postgres psql -U vitalem_user -d vitalem_db")
		log.Println("‚ö†Ô∏è  ")
		log.Println("‚ö†Ô∏è  -- If you want to preserve data:")
		log.Println("‚ö†Ô∏è  ALTER TABLE doctor_schedules ADD COLUMN work_days_json TEXT;")
		log.Println("‚ö†Ô∏è  UPDATE doctor_schedules SET work_days_json = (SELECT json_agg(unnest)::text FROM unnest(work_days)) WHERE work_days IS NOT NULL;")
		log.Println("‚ö†Ô∏è  UPDATE doctor_schedules SET work_days_json = '[]' WHERE work_days_json IS NULL;")
		log.Println("‚ö†Ô∏è  ALTER TABLE doctor_schedules ALTER COLUMN work_days_json SET NOT NULL;")
		log.Println("‚ö†Ô∏è  ALTER TABLE doctor_schedules DROP COLUMN work_days;")
		log.Println("‚ö†Ô∏è  ")
		log.Println("‚ö†Ô∏è  -- Or if you want to recreate the table from scratch:")
		log.Println("‚ö†Ô∏è  DROP TABLE doctor_schedules CASCADE;")
		log.Println("‚ö†Ô∏è  ")

		return fmt.Errorf("table doctor_schedules contains incompatible work_days column - manual intervention required")
	}

	if !workDaysJsonColumnExists {
		log.Println("üìù Table structure looks compatible, work_days_json will be created by AutoMigrate")
	} else {
		log.Println("‚úÖ Table structure is correct, work_days_json column exists")
	}

	return nil
}

// CreateIndexes - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
func CreateIndexes(db *gorm.DB) error {
	log.Println("üîÑ Creating database indexes...")

	// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è appointments —Ç–∞–±–ª–∏—Ü—ã
	indexes := []string{
		"CREATE INDEX IF NOT EXISTS idx_appointments_doctor_start_time ON appointments(doctor_id, start_time);",
		"CREATE INDEX IF NOT EXISTS idx_appointments_status_start_time ON appointments(status, start_time);",
		"CREATE INDEX IF NOT EXISTS idx_appointments_patient_start_time ON appointments(patient_id, start_time) WHERE patient_id IS NOT NULL;",

		// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤
		"CREATE UNIQUE INDEX IF NOT EXISTS idx_appointments_doctor_time_unique ON appointments(doctor_id, start_time, end_time);",

		// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è schedule_exceptions
		"CREATE INDEX IF NOT EXISTS idx_exceptions_doctor_date ON schedule_exceptions(doctor_id, date);",

		// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è doctor_schedules
		"CREATE INDEX IF NOT EXISTS idx_schedules_doctor_active ON doctor_schedules(doctor_id, is_active);",
	}

	for _, indexSQL := range indexes {
		if err := db.Exec(indexSQL).Error; err != nil {
			log.Printf("‚ö†Ô∏è Failed to create index: %s - %v", indexSQL, err)
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
		}
	}

	log.Println("‚úÖ Database indexes created successfully")
	return nil
}
