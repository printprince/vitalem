package messaging

import (
	"context"
	"encoding/json"
	"fmt"

	"NotificationService/internal/domain/models"
	"NotificationService/internal/service"
	"NotificationService/pkg/logger"

	"github.com/google/uuid"
	amqp "github.com/rabbitmq/amqp091-go"
)

type UserCreatedEvent struct {
	UserID string `json:"user_id"`
	Email  string `json:"email"`
	Role   string `json:"role"`
}

type Consumer struct {
	conn            *amqp.Connection
	channel         *amqp.Channel
	notificationSvc service.NotificationService
	logger          *logger.Logger
}

func NewConsumer(rabbitMQURL string, notificationSvc service.NotificationService, logger *logger.Logger) (*Consumer, error) {
	conn, err := amqp.Dial(rabbitMQURL)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to RabbitMQ: %w", err)
	}

	channel, err := conn.Channel()
	if err != nil {
		conn.Close()
		return nil, fmt.Errorf("failed to open channel: %w", err)
	}

	// Declare exchange
	err = channel.ExchangeDeclare(
		"vitalem", // name
		"topic",   // type
		true,      // durable
		false,     // auto-deleted
		false,     // internal
		false,     // no-wait
		nil,       // arguments
	)
	if err != nil {
		channel.Close()
		conn.Close()
		return nil, fmt.Errorf("failed to declare exchange: %w", err)
	}

	// Declare queue for user events
	queue, err := channel.QueueDeclare(
		"notification.user.events", // name
		true,                       // durable
		false,                      // delete when unused
		false,                      // exclusive
		false,                      // no-wait
		nil,                        // arguments
	)
	if err != nil {
		channel.Close()
		conn.Close()
		return nil, fmt.Errorf("failed to declare queue: %w", err)
	}

	// Bind queue to exchange
	err = channel.QueueBind(
		queue.Name,     // queue name
		"user.created", // routing key
		"vitalem",      // exchange
		false,
		nil,
	)
	if err != nil {
		channel.Close()
		conn.Close()
		return nil, fmt.Errorf("failed to bind queue: %w", err)
	}

	return &Consumer{
		conn:            conn,
		channel:         channel,
		notificationSvc: notificationSvc,
		logger:          logger,
	}, nil
}

func (c *Consumer) StartConsumer(ctx context.Context) error {
	msgs, err := c.channel.Consume(
		"notification.user.events", // queue
		"",                         // consumer
		true,                       // auto-ack
		false,                      // exclusive
		false,                      // no-local
		false,                      // no-wait
		nil,                        // args
	)
	if err != nil {
		return fmt.Errorf("failed to register consumer: %w", err)
	}

	c.logger.Info("Started RabbitMQ consumer for user events")

	go func() {
		for {
			select {
			case msg := <-msgs:
				c.handleUserCreatedEvent(ctx, msg.Body)
			case <-ctx.Done():
				c.logger.Info("Consumer context cancelled")
				return
			}
		}
	}()

	return nil
}

func (c *Consumer) handleUserCreatedEvent(ctx context.Context, body []byte) {
	var event UserCreatedEvent
	if err := json.Unmarshal(body, &event); err != nil {
		c.logger.Error("failed to unmarshal user created event", "error", err)
		return
	}

	c.logger.Info("processing user created event", "userID", event.UserID, "email", event.Email)

	// Convert string UserID to UUID
	userID, err := uuid.Parse(event.UserID)
	if err != nil {
		c.logger.Error("invalid user ID format", "userID", event.UserID, "error", err)
		return
	}

	// Create welcome notification
	notification := &models.Notification{
		Type:        models.UserRegistered,
		Channel:     models.ChannelEmail,
		RecipientID: userID,
		Recipient:   event.Email,
		// Message will be auto-generated by enrichMessage
	}

	if err := c.notificationSvc.Send(ctx, notification); err != nil {
		c.logger.Error("failed to send welcome notification", "userID", event.UserID, "error", err)
		return
	}

	c.logger.Info("welcome notification sent successfully", "userID", event.UserID, "email", event.Email)
}

func (c *Consumer) Close() error {
	if c.channel != nil {
		c.channel.Close()
	}
	if c.conn != nil {
		c.conn.Close()
	}
	return nil
}
