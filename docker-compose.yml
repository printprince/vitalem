version: '3.8'

services:
  # PostgreSQL - основная реляционная БД для хранения данных всех сервисов
  # Единый инстанс для всех микросервисов для упрощения разработки
  # В проде можно будет разделить на отдельные инстансы по сервисам
  postgres:
    image: postgres:15-alpine
    container_name: vitalem_postgres
    environment:
      POSTGRES_PASSWORD: 61324
      POSTGRES_USER: postgres
      POSTGRES_DB: vitalem_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RabbitMQ - брокер сообщений для асинхронного взаимодействия между сервисами
  # Используем для событийно-ориентированной коммуникации (event-driven)
  # Например: создание пользователя -> создание профиля пациента/врача
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: vitalem_rabbitmq
    ports:
      - "5672:5672"   # AMQP порт для сервисов
      - "15672:15672" # Management UI порт для админки (guest/guest)
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ELK-стек для централизованного логирования и мониторинга
  # Elasticsearch - NoSQL БД для хранения и индексации логов
  # Движок для полнотекстового поиска и аналитики по логам
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - action.destructive_requires_name=true
      - network.host=0.0.0.0
      - cluster.name=docker-cluster
      - node.name=es01
      - cluster.initial_master_nodes=es01
      - bootstrap.system_call_filter=false
      - "indices.query.bool.max_clause_count=8192"
      - "search.max_buckets=10000"
      - "thread_pool.write.queue_size=1000"
      - "thread_pool.search.queue_size=1000"
      - "thread_pool.get.queue_size=1000"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1.8G

  # Kibana - веб-интерфейс для Elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - NODE_OPTIONS="--max-old-space-size=512"
      - ELASTICSEARCH_REQUEST_TIMEOUT=30000
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
      - XPACK_SECURITY_ENCRYPTIONKEY=something_at_least_32_characters_long
      - XPACK_REPORTING_ENCRYPTIONKEY=something_at_least_32_characters_long
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=something_at_least_32_characters_long
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 768M

  # Filebeat - агент для сбора и отправки логов
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log/docker:/var/log/docker:ro
    depends_on:
      - elasticsearch
    networks:
      - app-network

  # Logger Service - кастомный сервис для централизованного логирования
  # Принимает логи от всех микросервисов через REST API
  # Обогащает и сохраняет в Elasticsearch для последующего анализа
  logger_service:
    build:
      context: ./logger_service
      dockerfile: Dockerfile
    container_name: logger_service
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=info
    ports:
      - "8802:8802"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  # Identity Service - сервис аутентификации и управления пользователями
  # Отвечает за регистрацию, логин, JWT-токены и управление профилями юзеров
  # Первый сервис в цепочке взаимодействия с системой
  identity_service:
    build:
      context: ./identity_service
      dockerfile: Dockerfile
    container_name: identity_service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=61324
      - DB_NAME=vitalem_db
      - DB_SSL_MODE=disable
      - LOGGER_SERVICE_URL=http://logger_service:8802
      - RMQ_HOST=rabbitmq
      - RMQ_PORT=5672
      - RMQ_USER=guest
      - RMQ_PASS=guest
      - RMQ_EXCHANGE=vitalem
      - JWT_SECRET=4324pkh23sk4jh342alhdlfl2sdjf
      - LOG_LEVEL=info
    ports:
      - "8801:8801"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      logger_service:
        condition: service_started
    networks:
      - app-network

  # Specialist Service - сервис для работы с врачами/специалистами
  # Хранит профили врачей, специализации, расписания и т.д.
  # Интегрируется с другими сервисами через RabbitMQ и прямые HTTP-вызовы
  specialist_service:
    build:
      context: ./specialist_service
      dockerfile: Dockerfile
    container_name: specialist_service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=61324
      - DB_NAME=vitalem_db
      - DB_SSL_MODE=disable
      - LOGGER_SERVICE_URL=http://logger_service:8802
      - RMQ_HOST=rabbitmq
      - RMQ_PORT=5672
      - RMQ_USER=guest
      - RMQ_PASS=guest
      - RMQ_EXCHANGE=vitalem
      - JWT_SECRET=4324pkh23sk4jh342alhdlfl2sdjf
      - LOG_LEVEL=info
    ports:
      - "8803:8803"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      logger_service:
        condition: service_started
      identity_service:
        condition: service_started
    networks:
      - app-network

  # Patient Service - сервис для работы с пациентами
  # Хранит медицинские профили, историю болезней, рецепты и т.д.
  # Основной сервис для пользователей-пациентов системы
  patient_service:
    build:
      context: ./patient_service
      dockerfile: Dockerfile
    container_name: patient_service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=61324
      - DB_NAME=vitalem_db
      - DB_SSL_MODE=disable
      - LOGGER_SERVICE_URL=http://logger_service:8802
      - RMQ_HOST=rabbitmq
      - RMQ_PORT=5672
      - RMQ_USER=guest
      - RMQ_PASS=guest
      - RMQ_EXCHANGE=vitalem
      - JWT_SECRET=4324pkh23sk4jh342alhdlfl2sdjf
      - LOG_LEVEL=info
    ports:
      - "8804:8804"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      logger_service:
        condition: service_started
      identity_service:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data:
  rabbitmq_data: