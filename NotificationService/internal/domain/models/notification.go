package models

import (
	"time"

	"github.com/google/uuid"
)

// NotificationChannel ‚Äî –∫–∞–Ω–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type NotificationChannel string

const (
	ChannelEmail    NotificationChannel = "email"
	ChannelSMS      NotificationChannel = "sms"
	ChannelTelegram NotificationChannel = "telegram"
	ChannelPush     NotificationChannel = "push"
)

// NotificationType ‚Äî —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
type NotificationType string

const (
	// üè• Medical/Appointment
	AppointmentBooked      NotificationType = "appointment.booked"
	AppointmentCanceled    NotificationType = "appointment.canceled"
	AppointmentReminder    NotificationType = "appointment.reminder"
	AppointmentConfirmed   NotificationType = "appointment.confirmed"
	AppointmentNew         NotificationType = "appointment.new"
	AppointmentRescheduled NotificationType = "appointment.rescheduled"

	// üë§ User/Profile
	UserRegistered      NotificationType = "user.registered"
	UserProfileUpdated  NotificationType = "user.profile.updated"
	UserPasswordChanged NotificationType = "user.password.changed"

	// üíä Medical/Treatment
	PrescriptionIssued   NotificationType = "prescription.issued"
	PrescriptionExpiring NotificationType = "prescription.expiring"
	TreatmentStarted     NotificationType = "treatment.started"
	TreatmentCompleted   NotificationType = "treatment.completed"

	// üìã Medical/Results
	TestResultsReady    NotificationType = "test.results.ready"
	LabResultsAvailable NotificationType = "lab.results.available"

	// üîî General/System
	SystemMaintenance NotificationType = "system.maintenance"
	SecurityAlert     NotificationType = "security.alert"
	PaymentProcessed  NotificationType = "payment.processed"
	PaymentFailed     NotificationType = "payment.failed"

	// üß© System/Logger
	SystemErrorOccurred   NotificationType = "system.error.occurred"
	GatewayServiceFailure NotificationType = "gateway.service.failure"
)

// DeliveryStatus ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type DeliveryStatus string

const (
	StatusPending DeliveryStatus = "pending"
	StatusSent    DeliveryStatus = "sent"
	StatusFailed  DeliveryStatus = "failed"
)

// Notification ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type Notification struct {
	ID          uint                `gorm:"primaryKey" json:"id"`
	Type        NotificationType    `gorm:"type:varchar(100);not null" json:"type"`
	Channel     NotificationChannel `gorm:"type:varchar(50);not null" json:"channel"`
	RecipientID uuid.UUID           `gorm:"type:uuid;not null;index" json:"recipientId"`
	Recipient   string              `gorm:"type:varchar(255);not null" json:"recipient"`
	Message     string              `gorm:"type:text;not null" json:"message"`
	Status      DeliveryStatus      `gorm:"type:varchar(20);not null;default:'pending'" json:"status"`
	Attempts    int                 `gorm:"not null;default:0" json:"attempts"`
	LastError   *string             `gorm:"type:text" json:"lastError,omitempty"`
	CreatedAt   time.Time           `json:"createdAt"`
	SentAt      *time.Time          `json:"sentAt,omitempty"`
}

// TableName —É–∫–∞–∑—ã–≤–∞–µ—Ç GORM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è —Ç–∞–±–ª–∏—Ü—ã "notifications"
func (Notification) TableName() string {
	return "notifications"
}
