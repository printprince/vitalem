package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/labstack/echo/v4"
	echomiddleware "github.com/labstack/echo/v4/middleware"
	"github.com/printprince/vitalem/gateway_service/docs"
	"github.com/printprince/vitalem/gateway_service/internal/config"
	"github.com/printprince/vitalem/gateway_service/internal/handlers"
	"github.com/printprince/vitalem/utils/middleware"

	_ "github.com/printprince/vitalem/gateway_service/docs" // swagger docs
)

// @title           Vitalem API Gateway
// @version         1.0.0
// @description     –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Vitalem. –£–ø—Ä–æ—â–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å backend —Å–µ—Ä–≤–∏—Å–∞–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ REST API.

// @host      localhost:8800
// @BasePath  /

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description –í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Bearer {–≤–∞—à_—Ç–æ–∫–µ–Ω}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig("./config.yaml")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º Echo —Å–µ—Ä–≤–µ—Ä
	e := echo.New()

	// –ë–∞–∑–æ–≤—ã–µ middleware
	e.Use(echomiddleware.Recover())
	e.Use(middleware.LoggerMiddleware())
	e.Use(middleware.CORSMiddleware())

	// Health check endpoint (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è handlers)
	// –í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint, –∑–∞–º–µ–Ω–∏–º –ø–æ–∑–∂–µ

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Swagger –º–∞—Ä—à—Ä—É—Ç—ã
	docs.SetupSwaggerRoutes(e)

	// –°–æ–∑–¥–∞–µ–º handlers
	proxyHandler := handlers.NewProxyHandler(cfg)
	swaggerHandlers := handlers.NewSwaggerHandlers(proxyHandler)

	// Health check endpoint
	e.GET("/health", swaggerHandlers.HealthCheck)

	// ===== –ü–£–ë–õ–ò–ß–ù–´–ï –†–û–£–¢–´ (–±–µ–∑ JWT) =====

	// Identity Service - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ø—É–±–ª–∏—á–Ω—ã–µ)
	auth := e.Group("/auth")
	auth.POST("/login", swaggerHandlers.Login)
	auth.POST("/register", swaggerHandlers.Register)
	auth.POST("/validate", swaggerHandlers.ValidateToken)

	// –ü—É–±–ª–∏—á–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è –≤—Ä–∞—á–µ–π (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π)
	publicDoctors := e.Group("/doctors")
	publicDoctors.GET("", swaggerHandlers.GetDoctors)    // –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
	publicDoctors.GET("/:id", swaggerHandlers.GetDoctor) // –ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞

	// –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
	publicFiles := e.Group("/public")
	publicFiles.GET("/:id", swaggerHandlers.GetPublicFile) // –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º

	// ===== –ó–ê–©–ò–©–ï–ù–ù–´–ï –†–û–£–¢–´ (—Ç—Ä–µ–±—É—é—Ç JWT) =====

	protected := e.Group("")
	protected.Use(middleware.JWTMiddleware(cfg.JWT.Secret))

	// Identity Service - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ)
	protectedAuth := protected.Group("/auth")
	protectedAuth.GET("/user", swaggerHandlers.GetUser)

	// Patient Service - –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	patients := protected.Group("/patients")
	patients.GET("", swaggerHandlers.GetPatients)
	patients.POST("", swaggerHandlers.CreatePatient)
	patients.GET("/:id", swaggerHandlers.GetPatient)
	patients.PUT("/:id", swaggerHandlers.UpdatePatient)
	patients.DELETE("/:id", swaggerHandlers.DeletePatient)
	patients.Any("/*", proxyHandler.ProxyToPatient) // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ proxy

	// Patient Service - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
	users := protected.Group("/users")
	users.GET("/:userID/patient", swaggerHandlers.GetPatientByUserID)
	users.PUT("/:userID/patient/profile", swaggerHandlers.UpdatePatientProfile)

	// Specialist Service - –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	protectedDoctors := protected.Group("/doctors")
	protectedDoctors.POST("", swaggerHandlers.CreateDoctor)
	protectedDoctors.PUT("/:id", swaggerHandlers.UpdateDoctor)
	protectedDoctors.DELETE("/:id", swaggerHandlers.DeleteDoctor)
	protectedDoctors.Any("/*", proxyHandler.ProxyToSpecialist) // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ proxy

	// Specialist Service - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ users –≥—Ä—É–ø–ø–µ)
	users.GET("/:userID/doctor", swaggerHandlers.GetDoctorByUserID)
	users.PUT("/:userID/doctor", swaggerHandlers.UpdateDoctorProfile)

	// Appointment Service - –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	appointments := protected.Group("/appointments")
	appointments.GET("", swaggerHandlers.GetAppointments)
	appointments.GET("/:id", swaggerHandlers.GetAppointment)
	appointments.POST("/:id/book", swaggerHandlers.BookAppointment)
	appointments.POST("/:id/cancel", swaggerHandlers.CancelAppointment)
	appointments.GET("/doctors/:id/available-slots", swaggerHandlers.GetAvailableSlots)

	// Appointment schedules (–¥–ª—è –≤—Ä–∞—á–µ–π)
	appointments.GET("/schedules", swaggerHandlers.GetSchedules)
	appointments.POST("/schedules", swaggerHandlers.CreateSchedule)
	appointments.PUT("/schedules/:id", swaggerHandlers.UpdateSchedule)
	appointments.DELETE("/schedules/:id", swaggerHandlers.DeleteSchedule)
	appointments.PATCH("/schedules/:id/toggle", swaggerHandlers.ToggleSchedule)
	appointments.POST("/schedules/:id/generate-slots", swaggerHandlers.GenerateSlots)
	appointments.DELETE("/schedules/:id/slots", swaggerHandlers.DeleteScheduleSlots)
	appointments.GET("/schedules/:id/generated-slots", swaggerHandlers.GetGeneratedSlots)

	// Schedule exceptions (–∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)
	appointments.POST("/exceptions", swaggerHandlers.AddException)
	appointments.GET("/exceptions", swaggerHandlers.GetDoctorExceptions)
	appointments.Any("/*", proxyHandler.ProxyToAppointment) // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ proxy

	// FileServer Service - –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	files := protected.Group("/files")
	files.GET("", swaggerHandlers.GetFiles)
	files.POST("", swaggerHandlers.UploadFile)
	files.GET("/:id", swaggerHandlers.GetFile)
	files.DELETE("/:id", swaggerHandlers.DeleteFile)
	files.GET("/:id/download", swaggerHandlers.DownloadFile)
	files.GET("/:id/preview", swaggerHandlers.PreviewFile)
	files.PATCH("/:id/visibility", swaggerHandlers.ToggleFileVisibility)
	files.Any("/*", proxyHandler.ProxyToFileServer) // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ proxy

	// Notification Service - –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	notifications := protected.Group("/notifications")
	notifications.GET("/my", swaggerHandlers.GetMyNotifications)
	notifications.GET("/:id", swaggerHandlers.GetNotification)
	notifications.POST("", swaggerHandlers.CreateNotification)
	notifications.PUT("/:id/sent", swaggerHandlers.MarkNotificationAsSent)
	notifications.GET("/recipient/:recipientId", swaggerHandlers.GetNotificationsByRecipient)
	notifications.Any("/*", proxyHandler.ProxyToNotification) // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ proxy

	// Logger Service
	logs := protected.Group("/logs")
	logs.Any("/*", proxyHandler.ProxyToLogger) // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	go func() {
		addr := fmt.Sprintf("%s:%d", cfg.Server.Host, cfg.Server.Port)
		log.Printf("üöÄ Gateway –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s", addr)
		log.Printf("üìã API —Å—Ö–µ–º–∞:")
		log.Printf("   –ü—É–±–ª–∏—á–Ω—ã–µ:")
		log.Printf("     POST /auth/login, /auth/register")
		log.Printf("     GET  /doctors, /doctors/:id")
		log.Printf("     GET  /public/:id")
		log.Printf("   –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ (JWT):")
		log.Printf("     /auth/*, /patients/*, /doctors/*, /appointments/*")
		log.Printf("     /notifications/*, /files/*, /logs/*")

		if err := e.Start(addr); err != nil && err != http.ErrServerClosed {
			log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	<-quit

	log.Println("–í—ã–∫–ª—é—á–µ–Ω–∏–µ Gateway...")
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := e.Shutdown(ctx); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: %v", err)
	}
	log.Println("Gateway –≤—ã–∫–ª—é—á–µ–Ω")
}
